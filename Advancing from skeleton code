My task to advancing from the skeleton code:

THE TASK:

Add the action cards to our Uno game. 
There are three types of action cards, and the deck should have 2 of each type of each color (so this adds 24 cards total to the deck):

Skip: when played, the next player's turn is skipped.

Reverse: when played, the order of play gets reversed. 
For example, if player #3 plays Reverse, then player #2 goes next, then player #1, and so on, until another Reverse is played, at which time the order of play gets reversed again back to the "normal order".

Draw Two: when played, the next player must draw 2 cards, and his/her turn is skipped.

These cards have the same matching rules as regular cards: for example, if when it comes to my turn there's a blue Skip on top of the pile, then I could play a green Skip, or a blue 2, or any other card that is a Skip or is blue.

My code, advanced from the skeleton:

import random

class UnoCard:
    '''represents an Uno card
    attributes:
      rank: int from 0 to 9
      color: string'''

    def __init__(self, rank, color):
        '''UnoCard(rank, color) -> UnoCard
        creates an Uno card with the given rank and color'''
        self.rank = rank
        self.color = color

    def __str__(self):
        '''str(Unocard) -> str'''
        return(str(self.color) + ' ' + str(self.rank))

    def is_match(self, other):
        '''UnoCard.is_match(UnoCard) -> boolean
        returns True if the cards match in rank or color, False if not'''
        return (self.color == other.color) or (self.rank == other.rank)

#we need to add the ACTION cards to our Uno game. 
#information on the action cards of the game:
'''There are three types of action cards, and the deck should have
2 of each type of each color. (adding 24 cards total to the deck).'''
'''skip: when played, the next player's turn is skipped
Reverse: when played, the order of the play (in which the turns are 
taken), get reversed. So, the elements of playerList need to be flipped.
Draw Two: when played, the next player must draw 2 cards, and his/her turn is skipped.

Note: These cards have the same matching rules as regular cards: for 
example, if when it comes to my turn there's a blue Skip on top of the
pile, then I could play a green Skip, or a blue 2, or any other card that
is a Skip or is blue.'''

#My new plan on what we should do: 
'''First, let's define a new ActionCard class that inherits from UnoCard to represent the action cards.

Then we need to modify the UnoDeck class to include the action cards in the deck.

Finally, we will modify the 
 method to handle the action cards when they are played.'''

class ActionCard(UnoCard):
    '''represents an Uno action card
    attributes:
      action: string, either 'skip', 'reverse', or 'drawTwo'
      color: string
    '''
    def __init__(self, action, color):
        '''ActionCard(action, color) -> ActionCard
        creates an Uno action card with the given action and color'''
        self.action = action
        self.color = color

    def __str__(self):
        '''str(ActionCard) -> str'''
        return(self.color + ' ' + self.action)

    def is_match(self, other):
        '''ActionCard.is_match(UnoCard) -> boolean
        returns True if the cards match in action or color, False if not'''
        return (self.color == other.color) or (self.action == other.action)

class UnoDeck:
    '''represents a deck of Uno cards
    attribute:
      deck: list of UnoCards'''

    def __init__(self):
        '''UnoDeck() -> UnoDeck
        creates a new full Uno deck'''
        self.deck = []
        for color in ['red', 'blue', 'green', 'yellow']:
            self.deck.append(UnoCard(0, color))  # one 0 of each color
            for i in range(2):
                for n in range(1, 10):  # two of each of 1-9 of each color
                    self.deck.append(UnoCard(n, color))
            # add action cards
            for action in ['skip', 'reverse', 'drawTwo']:
                for i in range(2):
                    self.deck.append(ActionCard(action, color))
        random.shuffle(self.deck)  # shuffle the deck

    def __str__(self):
        '''str(Unodeck) -> str'''
        return 'An Uno deck with '+str(len(self.deck)) + ' cards remaining.'

    def is_empty(self):
        '''UnoDeck.is_empty() -> boolean
        returns True if the deck is empty, False otherwise'''
        return len(self.deck) == 0

    def deal_card(self):
        '''UnoDeck.deal_card() -> UnoCard
        deals a card from the deck and returns it
        (the dealt card is removed from the deck)'''
        return self.deck.pop()

    def reset_deck(self, pile):
        '''UnoDeck.reset_deck(pile) -> None
        resets the deck from the pile'''
        if len(self.deck) != 0:
            return
        self.deck = pile.reset_pile() # get cards from the pile
        random.shuffle(self.deck)  # shuffle the deck

class UnoPile:
    '''represents the discard pile in Uno
    attribute:
      pile: list of UnoCards'''

    def __init__(self, deck):
        '''UnoPile(deck) -> UnoPile
        creates a new pile by drawing a card from the deck'''
        card = deck.deal_card()
        self.pile = [card]  # all the cards in the pile

    def __str__(self):
        '''str(UnoPile) -> str'''
        return 'The pile has ' + str(self.pile[-1]) + ' on top.'

    def top_card(self):
        '''UnoPile.top_card() -> UnoCard
        returns the top card in the pile'''
        return self.pile[-1]

    def add_card(self, card):
        '''UnoPile.add_card(card) -> None
        adds the card to the top of the pile'''
        self.pile.append(card)

    def reset_pile(self):
        '''UnoPile.reset_pile() -> list
        removes all but the top card from the pile and
          returns the rest of the cards as a list of UnoCards'''
        newdeck = self.pile[:-1]
        self.pile = [self.pile[-1]]
        return newdeck

class UnoPlayer:
    '''represents a player of Uno
    attributes:
      name: a string with the player's name
      hand: a list of UnoCards'''

    def __init__(self, name, deck):
        '''UnoPlayer(name, deck) -> UnoPlayer
        creates a new player with a new 7-card hand'''
        self.name = name
        self.hand = [deck.deal_card() for i in range(7)]

    def __str__(self):
        '''str(UnoPlayer) -> UnoPlayer'''
        return str(self.name) + ' has ' + str(len(self.hand)) + ' cards.'

    def get_name(self):
        '''UnoPlayer.get_name() -> str
        returns the player's name'''
        return self.name

    def get_hand(self):
        '''get_hand(self) -> str
        returns a string representation of the hand, one card per line'''
        output = ''
        for card in self.hand:
            output += str(card) + '\n'
        return output

    def has_won(self):
        '''UnoPlayer.has_won() -> boolean
        returns True if the player's hand is empty (player has won)'''
        return len(self.hand) == 0

    def draw_card(self, deck):
        '''UnoPlayer.draw_card(deck) -> UnoCard
        draws a card, adds to the player's hand
          and returns the card drawn'''
        card = deck.deal_card()  # get card from the deck
        self.hand.append(card)   # add this card to the hand
        return card

    def play_card(self, card, pile):
        '''UnoPlayer.play_card(card, pile) -> None
        plays a card from the player's hand to the pile
        CAUTION: does not check if the play is legal!'''
        self.hand.remove(card)
        pile.add_card(card)

    def take_turn(self, deck, pile, playerList, currentPlayerNum):
        '''UnoPlayer.take_turn(deck, pile) -> None
        takes the player's turn in the game
          deck is an UnoDeck representing the current deck
          pile is an UnoPile representing the discard pile'''
        # print player info
        print(self.name + ", it's your turn.")
        print(pile)
        print("Your hand: ")
        print(self.get_hand())
        # get a list of cards that can be played
        topcard = pile.top_card()
        matches = [card for card in self.hand if card.is_match(topcard)]
        if len(matches) > 0:  # can play
            for index in range(len(matches)):
                # print the playable cards with their number
                print(str(index + 1) + ": " + str(matches[index]))
            # get player's choice of which card to play
            choice = 0
            while choice < 1 or choice > len(matches):
                choicestr = input("Which do you want to play? ")
                if choicestr.isdigit():
                    choice = int(choicestr)
            # play the chosen card from hand, add it to the pile
            card_played = matches[choice - 1]
            self.play_card(card_played, pile)

            # handle action cards
            if isinstance(card_played, ActionCard):
                if card_played.action == 'skip':
                    print(f"{playerList[currentPlayerNum].get_name()}'s turn is skipped!")
                    currentPlayerNum = (currentPlayerNum + 1) % len(playerList)
                elif card_played.action == 'reverse':
                    playerList.reverse()
                    print("Play order reversed!")
                    currentPlayerNum = (currentPlayerNum + 1) % len(playerList) # Need to account for reverse
                elif card_played.action == 'drawTwo':
                    next_player = (currentPlayerNum + 1) % len(playerList)
                    playerList[next_player].draw_card(deck)
                    playerList[next_player].draw_card(deck)
                    print(f"{playerList[next_player].get_name()} draws two cards!")
                    currentPlayerNum = (currentPlayerNum + 1) % len(playerList)
        else:  # can't play
            print("You can't play, so you have to draw.")
            input("Press enter to draw.")
            # check if deck is empty -- if so, reset it
            if deck.is_empty():
                deck.reset_deck(pile)
            # draw a new card from the deck
            newcard = self.draw_card(deck)
            print("You drew: "+str(newcard))
            if newcard.is_match(topcard): # can be played
                print("Good -- you can play that!")
                self.play_card(newcard,pile)
            else:   # still can't play
                print("Sorry, you still can't play.")
            input("Press enter to continue.")
        return currentPlayerNum

def play_uno(numPlayers):
    '''play_uno(numPlayers) -> None
    plays a game of Uno with numPlayers'''
    # set up full deck and initial discard pile
    deck = UnoDeck()
    pile = UnoPile(deck)
    # set up the players
    playerList = [] #list must be mutable 
    for n in range(numPlayers):
        # get each player's name, then create an UnoPlayer
        name = input('Player #' + str(n + 1) + ', enter your name: ')
        playerList.append(UnoPlayer(name,deck))
    # randomly assign who goes first
    currentPlayerNum = random.randrange(numPlayers)
    # play the game
    while True:
        # print the game status
        print('-------')
        for player in playerList:
            print(player)
        print('-------')
        # take a turn
        currentPlayerNum = playerList[currentPlayerNum].take_turn(deck, pile, playerList, currentPlayerNum)
        # check for a winner
        if playerList[currentPlayerNum].has_won():
            print(playerList[currentPlayerNum].get_name() + " wins!")
            print("Thanks for playing!")
            break
        # go to the next player
        currentPlayerNum = (currentPlayerNum + 1) % numPlayers


#

A break down of my code:

1. Card Representation:

UnoCard class: Represents a regular Uno card with a rank (0-9) and a color.
ActionCard class: Represents an action card with an action (skip, reverse, or drawTwo) and a color. It inherits from UnoCard.
2. Deck and Pile:

UnoDeck class: Manages the deck of cards. It initializes with a full deck, shuffles it, deals cards, and resets the deck from the discard pile.
UnoPile class: Represents the discard pile. It's initialized with a single card from the deck, allows adding cards to the top, and can be reset to refill the deck.
3. Player:

UnoPlayer class: Represents a player in the game. It has a name, a hand of cards, and methods for:
Drawing cards
Playing cards (without checking legality)
Taking a turn (this is where the logic for playing, drawing, and handling action cards happens)
4. Game Logic:

play_uno function: Controls the main game loop. It:
Creates a deck and an initial discard pile.
Creates players, gets their names, and initializes their hands.
Randomly assigns a starting player.
Iterates through turns:
Prints the current game state (player hands and discard pile).
Calls take_turn for the current player.
Checks if the current player has won.
Switches to the next player.
5. Action Card Handling:

Inside, when an action card is played:
"skip" skips the next player's turn.
"reverse" reverses the order of players.
"drawTwo" makes the next player draw two cards and skip their turn.
Overall, the code creates a playable Uno game with basic features, including:

Creating a deck and players
Dealing hands
Taking turns with drawing and playing cards
Handling action cards (skip, reverse, drawTwo)
Determining a winner


Key improvements to consider:

Legality checks: The code currently doesn't check if a player can play a card based on the rules of Uno. Adding these checks would make the game more accurate.
User Interface: The game is text-based. Consider adding a graphical interface or a more user-friendly way to display cards and actions.
Advanced rules: The code could be extended to include more advanced Uno rules, like "wild" cards or "draw four" cards.
Error handling: Add error handling for cases like invalid player input or empty decks.
